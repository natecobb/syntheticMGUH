ETLSyntheaBuilder::CreateCDMTables(connectionDetails = cd, cdmSchema = cdmSchema, cdmVersion = cdmVersion)
ETLSyntheaBuilder::CreateCDMTables(connectionDetails = cd, cdmSchema = cdmSchema, cdmVersion = cdmVersion)
ETLSyntheaBuilder::LoadVocabFromCsv(connectionDetails = cd, cdmSchema = cdmSchema, vocabFileLoc = vocabFileLoc)
ETLSyntheaBuilder::LoadEventTables(connectionDetails = cd, cdmSchema = cdmSchema, syntheaSchema = syntheaSchema, cdmVersion = cdmVersion, syntheaVersion = syntheaVersion)
con <- connect(cd)
dbExecute(con, "DROP SCHEMA IF EXISTS omop CASCADE;")
dbDisconnect(con)
ETLSyntheaBuilder::CreateCDMTables(connectionDetails = cd, cdmSchema = cdmSchema, cdmVersion = cdmVersion)
con <- connect(cd)
dbExecute(con, "DROP SCHEMA IF EXISTS OMOP CASCADE;")
dbDisconnect(con)
ETLSyntheaBuilder::CreateCDMTables(connectionDetails = cd, cdmSchema = cdmSchema, cdmVersion = cdmVersion)
con <- connect(cd)
dbExecute(con, "DROP SCHEMA IF EXISTS OMOP CASCADE;")
dbExecute(con, "CREATE SCHEMA OMOP;")
dbDisconnect(con)
ETLSyntheaBuilder::CreateCDMTables(connectionDetails = cd, cdmSchema = cdmSchema, cdmVersion = cdmVersion)
#ETLSyntheaBuilder::CreateSyntheaTables(connectionDetails = cd, syntheaSchema = syntheaSchema, syntheaVersion = syntheaVersion)
#ETLSyntheaBuilder::LoadSyntheaTables(connectionDetails = cd, syntheaSchema = syntheaSchema, syntheaFileLoc = syntheaFileLoc)
ETLSyntheaBuilder::LoadVocabFromCsv(connectionDetails = cd, cdmSchema = cdmSchema, vocabFileLoc = vocabFileLoc)
ETLSyntheaBuilder::LoadEventTables(connectionDetails = cd, cdmSchema = cdmSchema, syntheaSchema = syntheaSchema, cdmVersion = cdmVersion, syntheaVersion = syntheaVersion)
con <- connect(cd)
dbExecute(con, "DROP SCHEMA IF EXISTS OMOP CASCADE;")
dbExecute(con, "CREATE SCHEMA OMOP;")
dbDisconnect(con)
ETLSyntheaBuilder::CreateCDMTables(connectionDetails = cd, cdmSchema = cdmSchema, cdmVersion = cdmVersion)
ETLSyntheaBuilder::LoadVocabFromCsv(connectionDetails = cd, cdmSchema = cdmSchema, vocabFileLoc = vocabFileLoc)
ETLSyntheaBuilder::LoadEventTables(connectionDetails = cd, cdmSchema = cdmSchema, syntheaSchema = syntheaSchema, cdmVersion = cdmVersion, syntheaVersion = syntheaVersion)
con <- connect(cd)
dbExecute(con, "alter table public.immunizations alter column code type varchar(8);")
dbDisconnect(con)
dbExecute(con, "alter table public.devices alter column code type varchar(8);")
con <- connect(cd)
dbExecute(con, "alter table public.devices alter column code type varchar(8);")
dbExecute(con, "alter table public.devices alter column code type varchar(16);")
con <- connect(cd)
dbExecute(con, "alter table public.allergies alter column code type varchar(16);")
dbExecute(con, "alter table public.immunizations alter column code type varchar(16);")
dbExecute(con, "alter table public.conditions alter column code type varchar(16);")
dbExecute(con, "alter table public.devices alter column code type varchar(16);")
dbExecute(con, "alter table public.encounters alter column code type varchar(16);")
dbExecute(con, "alter table public.encounters alter column reasoncode type varchar(16);")
dbExecute(con, "alter table public.imaging_studies alter column bodysite_code type varchar(16);")
dbExecute(con, "alter table public.imaging_studies alter column procedure_code type varchar(16);")
dbExecute(con, "alter table public.imaging_studies alter column procedure_code type varchar(32);")
dbExecute(con, "alter table public.medications alter column code type varchar(16);")
dbExecute(con, "alter table public.observations alter column code type varchar(16);")
dbExecute(con, "alter table public.procedures alter column code type varchar(16);")
dbExecute(con, "alter table public.procedures alter column reasoncode type varchar(16);")
con <- connect(cd)
dbExecute(con, "DROP SCHEMA IF EXISTS OMOP CASCADE;")
dbExecute(con, "CREATE SCHEMA OMOP;")
dbDisconnect(con)
con <- connect(cd)
dbExecute(con, "alter table public.allergies alter column code type varchar(16);")
dbExecute(con, "alter table public.immunizations alter column code type varchar(16);")
dbExecute(con, "alter table public.conditions alter column code type varchar(16);")
dbExecute(con, "alter table public.devices alter column code type varchar(16);")
dbExecute(con, "alter table public.encounters alter column code type varchar(16);")
dbExecute(con, "alter table public.encounters alter column reasoncode type varchar(16);")
dbExecute(con, "alter table public.imaging_studies alter column bodysite_code type varchar(16);")
dbExecute(con, "alter table public.imaging_studies alter column procedure_code type varchar(32);")
dbExecute(con, "alter table public.medications alter column code type varchar(16);")
dbExecute(con, "alter table public.observations alter column code type varchar(16);")
dbExecute(con, "alter table public.procedures alter column code type varchar(16);")
dbExecute(con, "alter table public.procedures alter column reasoncode type varchar(16);")
dbDisconnect(con)
ETLSyntheaBuilder::CreateCDMTables(connectionDetails = cd, cdmSchema = cdmSchema, cdmVersion = cdmVersion)
ETLSyntheaBuilder::LoadVocabFromCsv(connectionDetails = cd, cdmSchema = cdmSchema, vocabFileLoc = vocabFileLoc)
ETLSyntheaBuilder::LoadEventTables(connectionDetails = cd, cdmSchema = cdmSchema, syntheaSchema = syntheaSchema, cdmVersion = cdmVersion, syntheaVersion = syntheaVersion)
con <- connect(cd)
dbExecute(con, "alter table public.allergies alter column code type varchar(16);")
dbExecute(con, "alter table public.immunizations alter column code type varchar(16);")
dbExecute(con, "alter table public.conditions alter column code type varchar(16);")
dbExecute(con, "alter table public.devices alter column code type varchar(16);")
dbExecute(con, "alter table public.encounters alter column code type varchar(16);")
dbExecute(con, "alter table public.encounters alter column reasoncode type varchar(16);")
dbExecute(con, "alter table public.imaging_studies alter column bodysite_code type varchar(16);")
dbExecute(con, "alter table public.imaging_studies alter column procedure_code type varchar(32);")
dbExecute(con, "alter table public.medications alter column code type varchar(16);")
dbExecute(con, "alter table public.observations alter column code type varchar(16);")
dbExecute(con, "alter table public.procedures alter column code type varchar(16);")
dbExecute(con, "alter table public.procedures alter column reasoncode type varchar(16);")
# These are temporary and we'll roll them back, difference between 3.0.0 and 3.2.0
dbExecute(con, "alter table public.payer_transitions rename column start_date to start_year;;")
con <- connect(cd)
dbExecute(con, "alter table public.payer_transitions rename column start_date to start_year;")
dbExecute(con, "alter table public.payer_transitions rename column end_date to end_year;;")
ETLSyntheaBuilder::CreateCDMTables(connectionDetails = cd, cdmSchema = cdmSchema, cdmVersion = cdmVersion)
con <- connect(cd)
dbExecute(con, "DROP SCHEMA IF EXISTS OMOP CASCADE;")
dbExecute(con, "CREATE SCHEMA OMOP;")
dbDisconnect(con)
con <- connect(cd)
dbExecute(con, "alter table public.allergies alter column code type varchar(16);")
dbExecute(con, "alter table public.immunizations alter column code type varchar(16);")
dbExecute(con, "alter table public.conditions alter column code type varchar(16);")
dbExecute(con, "alter table public.devices alter column code type varchar(16);")
dbExecute(con, "alter table public.encounters alter column code type varchar(16);")
dbExecute(con, "alter table public.encounters alter column reasoncode type varchar(16);")
dbExecute(con, "alter table public.imaging_studies alter column bodysite_code type varchar(16);")
dbExecute(con, "alter table public.imaging_studies alter column procedure_code type varchar(32);")
dbExecute(con, "alter table public.medications alter column code type varchar(16);")
dbExecute(con, "alter table public.observations alter column code type varchar(16);")
dbExecute(con, "alter table public.procedures alter column code type varchar(16);")
dbExecute(con, "alter table public.procedures alter column reasoncode type varchar(16);")
# These are temporary and we'll roll them back, difference between 3.0.0 and 3.2.0
dbExecute(con, "alter table public.payer_transitions rename column start_date to start_year;")
con <- connect(cd)
dbExecute(con, "alter table public.payer_transitions rename column start_year to start_date;")
dbExecute(con, "alter table public.payer_transitions rename column end_year to end_date;")
dbDisconnect(con)
con <- connect(cd)
dbExecute(con, "alter table public.allergies alter column code type varchar(16);")
dbExecute(con, "alter table public.immunizations alter column code type varchar(16);")
dbExecute(con, "alter table public.conditions alter column code type varchar(16);")
dbExecute(con, "alter table public.devices alter column code type varchar(16);")
dbExecute(con, "alter table public.encounters alter column code type varchar(16);")
dbExecute(con, "alter table public.encounters alter column reasoncode type varchar(16);")
dbExecute(con, "alter table public.imaging_studies alter column bodysite_code type varchar(16);")
dbExecute(con, "alter table public.imaging_studies alter column procedure_code type varchar(32);")
dbExecute(con, "alter table public.medications alter column code type varchar(16);")
dbExecute(con, "alter table public.observations alter column code type varchar(16);")
dbExecute(con, "alter table public.procedures alter column code type varchar(16);")
dbExecute(con, "alter table public.procedures alter column reasoncode type varchar(16);")
# These are temporary and we'll roll them back, difference between 3.0.0 and 3.2.0
dbExecute(con, "alter table public.payer_transitions rename column start_date to start_year;")
dbExecute(con, "alter table public.payer_transitions rename column end_date to end_year;")
dbDisconnect(con)
ETLSyntheaBuilder::CreateCDMTables(connectionDetails = cd, cdmSchema = cdmSchema, cdmVersion = cdmVersion)
ETLSyntheaBuilder::LoadVocabFromCsv(connectionDetails = cd, cdmSchema = cdmSchema, vocabFileLoc = vocabFileLoc)
ETLSyntheaBuilder::LoadEventTables(connectionDetails = cd, cdmSchema = cdmSchema, syntheaSchema = syntheaSchema, cdmVersion = cdmVersion, syntheaVersion = syntheaVersion)
con <- connect(cd)
dbExecute(con, "alter table public.allergies alter column code type varchar(16);")
dbExecute(con, "alter table public.immunizations alter column code type varchar(16);")
dbExecute(con, "alter table public.conditions alter column code type varchar(16);")
dbExecute(con, "alter table public.devices alter column code type varchar(16);")
dbExecute(con, "alter table public.encounters alter column code type varchar(16);")
dbExecute(con, "alter table public.encounters alter column reasoncode type varchar(16);")
dbExecute(con, "alter table public.imaging_studies alter column bodysite_code type varchar(16);")
dbExecute(con, "alter table public.imaging_studies alter column procedure_code type varchar(32);")
dbExecute(con, "alter table public.immunizations alter column code type varchar(16);")
dbExecute(con, "alter table public.medications alter column code type varchar(16);")
dbExecute(con, "alter table public.observations alter column code type varchar(16);")
dbExecute(con, "alter table public.procedures alter column code type varchar(16);")
dbExecute(con, "alter table public.procedures alter column reasoncode type varchar(16);")
# These are temporary and we'll roll them back, difference between 3.0.0 and 3.2.0
dbExecute(con, "alter table public.payer_transitions rename column start_date to start_year;")
source("/Volumes/Storage/synthea-3.2.0/syntheticMGUH/OMOP/convert_to_omop.R", echo=TRUE)
dbExecute(con, "alter table public.payer_transitions rename column start_year to start_date;")
dbExecute(con, "alter table public.payer_transitions rename column end_year to end_date;")
dbDisconnect(con)
con <- connect(cd)
dbExecute(con, "alter table public.allergies alter column code type varchar(16);")
dbExecute(con, "alter table public.immunizations alter column code type varchar(16);")
dbExecute(con, "alter table public.conditions alter column code type varchar(16);")
dbExecute(con, "alter table public.devices alter column code type varchar(16);")
dbExecute(con, "alter table public.encounters alter column code type varchar(16);")
dbExecute(con, "alter table public.encounters alter column reasoncode type varchar(16);")
dbExecute(con, "alter table public.imaging_studies alter column bodysite_code type varchar(16);")
dbExecute(con, "alter table public.imaging_studies alter column procedure_code type varchar(32);")
dbExecute(con, "alter table public.immunizations alter column code type varchar(16);")
dbExecute(con, "alter table public.medications alter column code type varchar(16);")
dbExecute(con, "alter table public.observations alter column code type varchar(16);")
dbExecute(con, "alter table public.procedures alter column code type varchar(16);")
dbExecute(con, "alter table public.procedures alter column reasoncode type varchar(16);")
# These are temporary and we'll roll them back, difference between 3.0.0 and 3.2.0
dbExecute(con, "alter table public.payer_transitions rename column start_date to start_year;")
dbExecute(con, "alter table public.payer_transitions rename column end_date to end_year;")
dbDisconnect(con)
con <- connect(cd)
dbExecute(con, "alter table public.payer_transitions rename column start_year to start_date;")
dbExecute(con, "alter table public.payer_transitions rename column end_year to end_date;")
dbDisconnect(con)
con <- connect(cd)
dbExecute(con, "DROP SCHEMA IF EXISTS OMOP CASCADE;")
dbExecute(con, "CREATE SCHEMA OMOP;")
dbDisconnect(con)
con <- connect(cd)
dbExecute(con, "alter table public.allergies alter column code type varchar(16);")
dbExecute(con, "alter table public.immunizations alter column code type varchar(16);")
dbExecute(con, "alter table public.conditions alter column code type varchar(16);")
dbExecute(con, "alter table public.devices alter column code type varchar(16);")
dbExecute(con, "alter table public.encounters alter column code type varchar(16);")
dbExecute(con, "alter table public.encounters alter column reasoncode type varchar(16);")
dbExecute(con, "alter table public.imaging_studies alter column bodysite_code type varchar(16);")
dbExecute(con, "alter table public.imaging_studies alter column procedure_code type varchar(32);")
dbExecute(con, "alter table public.immunizations alter column code type varchar(16);")
dbExecute(con, "alter table public.medications alter column code type varchar(16);")
dbExecute(con, "alter table public.observations alter column code type varchar(16);")
dbExecute(con, "alter table public.procedures alter column code type varchar(16);")
dbExecute(con, "alter table public.procedures alter column reasoncode type varchar(16);")
# These are temporary and we'll roll them back, difference between 3.0.0 and 3.2.0
dbExecute(con, "alter table public.payer_transitions rename column start_date to start_year;")
dbExecute(con, "alter table public.payer_transitions rename column end_date to end_year;")
dbDisconnect(con)
ETLSyntheaBuilder::CreateCDMTables(connectionDetails = cd, cdmSchema = cdmSchema, cdmVersion = cdmVersion)
ETLSyntheaBuilder::LoadVocabFromCsv(connectionDetails = cd, cdmSchema = cdmSchema, vocabFileLoc = vocabFileLoc)
ETLSyntheaBuilder::LoadEventTables(connectionDetails = cd, cdmSchema = cdmSchema, syntheaSchema = syntheaSchema, cdmVersion = cdmVersion, syntheaVersion = syntheaVersion)
con <- connect(cd)
dbExecute(con, "alter table public.claims alter column diagnosis1 type varchar(16);")
dbDisconnect(con)
con <- connect(cd)
dbExecute(con, "alter table public.claims alter column diagnosis1 type varchar(32);")
dbDisconnect(con)
con <- connect(cd)
dbExecute(con, "alter table public.claims alter column currentillnessdate type timestamptz;")
dbExecute(con, "alter table public.claims alter column currentillnessdate type timestamptz USING currentillnessdate::timestamp with time zone;")
dbDisconnect(con)
con <- connect(cd)
dbExecute(con, "DROP SCHEMA IF EXISTS OMOP CASCADE;")
dbExecute(con, "CREATE SCHEMA OMOP;")
dbDisconnect(con)
con <- connect(cd)
dbExecute(con, "alter table public.allergies alter column code type varchar(16);")
dbExecute(con, "alter table public.immunizations alter column code type varchar(16);")
dbExecute(con, "alter table public.conditions alter column code type varchar(16);")
dbExecute(con, "alter table public.devices alter column code type varchar(16);")
dbExecute(con, "alter table public.encounters alter column code type varchar(16);")
dbExecute(con, "alter table public.encounters alter column reasoncode type varchar(16);")
dbExecute(con, "alter table public.imaging_studies alter column bodysite_code type varchar(16);")
dbExecute(con, "alter table public.imaging_studies alter column procedure_code type varchar(32);")
dbExecute(con, "alter table public.immunizations alter column code type varchar(16);")
dbExecute(con, "alter table public.medications alter column code type varchar(16);")
dbExecute(con, "alter table public.observations alter column code type varchar(16);")
dbExecute(con, "alter table public.procedures alter column code type varchar(16);")
dbExecute(con, "alter table public.procedures alter column reasoncode type varchar(16);")
dbExecute(con, "alter table public.claims alter column diagnosis1 type varchar(32);")
dbExecute(con, "alter table public.claims alter column currentillnessdate type timestamptz USING currentillnessdate::timestamp with time zone;")
# These are temporary and we'll roll them back, difference between 3.0.0 and 3.2.0
dbExecute(con, "alter table public.payer_transitions rename column start_date to start_year;")
con <- connect(cd)
dbExecute(con, "alter table public.payer_transitions rename column start_year to start_date;")
dbExecute(con, "alter table public.payer_transitions rename column end_year to end_date;")
dbDisconnect(con)
con <- connect(cd)
dbExecute(con, "DROP SCHEMA IF EXISTS OMOP CASCADE;")
dbExecute(con, "CREATE SCHEMA OMOP;")
dbDisconnect(con)
con <- connect(cd)
dbExecute(con, "alter table public.allergies alter column code type varchar(16);")
dbExecute(con, "alter table public.immunizations alter column code type varchar(16);")
dbExecute(con, "alter table public.conditions alter column code type varchar(16);")
dbExecute(con, "alter table public.devices alter column code type varchar(16);")
dbExecute(con, "alter table public.encounters alter column code type varchar(16);")
dbExecute(con, "alter table public.encounters alter column reasoncode type varchar(16);")
dbExecute(con, "alter table public.imaging_studies alter column bodysite_code type varchar(16);")
dbExecute(con, "alter table public.imaging_studies alter column procedure_code type varchar(32);")
dbExecute(con, "alter table public.immunizations alter column code type varchar(16);")
dbExecute(con, "alter table public.medications alter column code type varchar(16);")
dbExecute(con, "alter table public.observations alter column code type varchar(16);")
dbExecute(con, "alter table public.procedures alter column code type varchar(16);")
dbExecute(con, "alter table public.procedures alter column reasoncode type varchar(16);")
dbExecute(con, "alter table public.claims alter column diagnosis1 type varchar(32);")
dbExecute(con, "alter table public.claims alter column currentillnessdate type timestamptz USING currentillnessdate::timestamp with time zone;")
# These are temporary and we'll roll them back, difference between 3.0.0 and 3.2.0
dbExecute(con, "alter table public.payer_transitions rename column start_date to start_year;")
dbExecute(con, "alter table public.payer_transitions rename column end_date to end_year;")
dbDisconnect(con)
ETLSyntheaBuilder::CreateCDMTables(connectionDetails = cd, cdmSchema = cdmSchema, cdmVersion = cdmVersion)
ETLSyntheaBuilder::LoadVocabFromCsv(connectionDetails = cd, cdmSchema = cdmSchema, vocabFileLoc = vocabFileLoc)
ETLSyntheaBuilder::LoadEventTables(connectionDetails = cd, cdmSchema = cdmSchema, syntheaSchema = syntheaSchema, cdmVersion = cdmVersion, syntheaVersion = syntheaVersion)
con <- connect(cd)
dbExecute(con, "alter table public.payer_transitions rename column start_year to start_date;")
dbExecute(con, "alter table public.payer_transitions rename column end_year to end_date;")
dbDisconnect(con)
con <- connect(cd)
dbRemoveTable(con, "omop.all_visits")
dbDisconnect(con)
con <- connect(cd)
dbRemoveTable(con, "omop.all_visits")
source("/Volumes/Storage/synthea-3.2.0/syntheticMGUH/OMOP/convert_to_omop.R", echo=TRUE)
source("/Volumes/Storage/synthea-3.2.0/syntheticMGUH/OMOP/convert_to_omop.R", echo=TRUE)
con <- connect(cd)
dbExecute(con, "alter table public.payer_transitions rename column start_year to start_date;")
source("/Volumes/Storage/synthea-3.2.0/syntheticMGUH/OMOP/convert_to_omop.R", echo=TRUE)
library(ETLSyntheaBuilder) #renv::install_packages("OHDSI/ETL-Synthea")
library(DatabaseConnector)
library("optparse")
parser <- OptionParser()
parser <- add_option(parser, "--uid", action="store", default='postgres')
parser <- add_option(parser, "--pwd", action="store", default='')
parser <- add_option(parser, "--host",action="store", default='localhost')
parser <- add_option(parser, "--db",action="store", default='localhost')
parser <- add_option(parser, "--source",action="store", default='public')
parser <- add_option(parser, "--target",action="store", default='OMOP')
args <- parse_args(parser, args = c("--uid", "--pwd", "--host", "--db", "--source", "--target"))
con <- connect(cd)
dbExecute(con, "alter table public.payer_transitions rename column start_year to start_date;")
dbExecute(con, "alter table public.payer_transitions rename column end_year to end_date;")
dbDisconnect(con)
con <- connect(cd)
dbExecute(con, "alter table public.payer_transitions rename column start_year to start_date;")
dbExecute(con, "alter table public.payer_transitions rename column end_year to end_date;")
dbDisconnect(con)
source("/Volumes/Storage/synthea-3.2.0/syntheticMGUH/OMOP/convert_to_omop.R", echo=TRUE)
#!/usr/bin/env Rscript
# We are loading a version 5.4 CDM into a local PostgreSQL database called "syntheticMGUH".
# The ETLSyntheaBuilder package leverages the OHDSI/CommonDataModel package for CDM creation.
# Valid CDM versions are determined by executing CommonDataModel::listSupportedVersions().
# The strings representing supported CDM versions are currently "5.3" and "5.4".
library(ETLSyntheaBuilder) #renv::install_packages("OHDSI/ETL-Synthea")
library(DatabaseConnector)
library("optparse")
cmd_args = commandArgs(trailingOnly = TRUE)
cmd_args = c("--uid postgres", "--pwd ''", "--host localhost", "--db syntheticMGUH", "--source public", "--target OMOP")
parser <- OptionParser()
parser <- add_option(parser, c("-u", "--uid"), action="store", default='postgres')
parser <- add_option(parser, c("-p", "--pwd"), action="store", default='')
parser <- add_option(parser, "--host",action="store", default='localhost')
parser <- add_option(parser, "--db",action="store", default='localhost')
parser <- add_option(parser, "--source",action="store", default='public')
parser <- add_option(parser, "--target",action="store", default='OMOP')
args <- parse_args(parser, args = cmd_args, positional_arguments = TRUE)
#!/usr/bin/env Rscript
# We are loading a version 5.4 CDM into a local PostgreSQL database called "syntheticMGUH".
# The ETLSyntheaBuilder package leverages the OHDSI/CommonDataModel package for CDM creation.
# Valid CDM versions are determined by executing CommonDataModel::listSupportedVersions().
# The strings representing supported CDM versions are currently "5.3" and "5.4".
library(ETLSyntheaBuilder) #renv::install_packages("OHDSI/ETL-Synthea")
library(DatabaseConnector)
library("optparse")
cmd_args = commandArgs(trailingOnly = TRUE)
cmd_args = c("--uid=postgres", "--pwd ''", "--host localhost", "--db syntheticMGUH", "--source public", "--target OMOP")
parser <- OptionParser()
parser <- add_option(parser, c("-u", "--uid"), action="store", default='postgres')
parser <- add_option(parser, c("-p", "--pwd"), action="store", default='')
parser <- add_option(parser, "--host",action="store", default='localhost')
parser <- add_option(parser, "--db",action="store", default='localhost')
parser <- add_option(parser, "--source",action="store", default='public')
parser <- add_option(parser, "--target",action="store", default='OMOP')
args <- parse_args(parser, args = cmd_args, positional_arguments = TRUE)
#!/usr/bin/env Rscript
# We are loading a version 5.4 CDM into a local PostgreSQL database called "syntheticMGUH".
# The ETLSyntheaBuilder package leverages the OHDSI/CommonDataModel package for CDM creation.
# Valid CDM versions are determined by executing CommonDataModel::listSupportedVersions().
# The strings representing supported CDM versions are currently "5.3" and "5.4".
library(ETLSyntheaBuilder) #renv::install_packages("OHDSI/ETL-Synthea")
library(DatabaseConnector)
library("optparse")
cmd_args = commandArgs(trailingOnly = TRUE)
cmd_args = c("--uid=postgres", "--pwd=''", "--host=localhost", "--db=syntheticMGUH", "--source=public", "--target=OMOP")
parser <- OptionParser()
parser <- add_option(parser, c("-u", "--uid"), action="store", default='postgres')
parser <- add_option(parser, c("-p", "--pwd"), action="store", default='')
parser <- add_option(parser, "--host",action="store", default='localhost')
parser <- add_option(parser, "--db",action="store", default='localhost')
parser <- add_option(parser, "--source",action="store", default='public')
parser <- add_option(parser, "--target",action="store", default='OMOP')
args <- parse_args(parser, args = cmd_args, positional_arguments = TRUE)
sprintf("%s/%s", args$options$host, args$options$db)
cd <- DatabaseConnector::createConnectionDetails(
dbms     = "postgresql",
server   = sprintf("%s/%s", args$options$host, args$options$db),
user     = args$options$uid,
password = args$options$pwd,
port     = 5432,
)
print(cd)
syntheaSchema  <- args$source
cdmSchema      <- args$target
cdmVersion     <- "5.4"
syntheaVersion <- "3.0.0"
vocabFileLoc   <- "OMOP/vocabulary_v5"
con <- connect(cd)
dbExecute(con, "DROP SCHEMA IF EXISTS OMOP CASCADE;")
dbExecute(con, "CREATE SCHEMA OMOP;")
dbDisconnect(con)
con <- connect(cd)
dbExecute(con, "alter table public.allergies alter column code type varchar(32);")
dbExecute(con, "alter table public.immunizations alter column code type varchar(32);")
dbExecute(con, "alter table public.conditions alter column code type varchar(32);")
dbExecute(con, "alter table public.devices alter column code type varchar(32);")
dbExecute(con, "alter table public.encounters alter column code type varchar(32);")
dbExecute(con, "alter table public.encounters alter column reasoncode type varchar(32);")
dbExecute(con, "alter table public.imaging_studies alter column bodysite_code type varchar(32);")
dbExecute(con, "alter table public.imaging_studies alter column procedure_code type varchar(32);")
dbExecute(con, "alter table public.immunizations alter column code type varchar(32);")
dbExecute(con, "alter table public.medications alter column code type varchar(32);")
dbExecute(con, "alter table public.observations alter column code type varchar(32);")
dbExecute(con, "alter table public.procedures alter column code type varchar(32);")
dbExecute(con, "alter table public.procedures alter column reasoncode type varchar(32);")
dbExecute(con, "alter table public.claims alter column diagnosis1 type varchar(32);")
dbExecute(con, "alter table public.claims alter column currentillnessdate type timestamptz USING currentillnessdate::timestamp with time zone;")
# These are temporary and we'll roll them back, difference between 3.0.0 and 3.2.0
dbExecute(con, "alter table public.payer_transitions rename column start_date to start_year;")
dbExecute(con, "alter table public.payer_transitions rename column end_date to end_year;")
dbDisconnect(con)
ETLSyntheaBuilder::CreateCDMTables(connectionDetails = cd, cdmSchema = cdmSchema, cdmVersion = cdmVersion)
#!/usr/bin/env Rscript
# We are loading a version 5.4 CDM into a local PostgreSQL database called "syntheticMGUH".
# The ETLSyntheaBuilder package leverages the OHDSI/CommonDataModel package for CDM creation.
# Valid CDM versions are determined by executing CommonDataModel::listSupportedVersions().
# The strings representing supported CDM versions are currently "5.3" and "5.4".
library(ETLSyntheaBuilder) #renv::install_packages("OHDSI/ETL-Synthea")
library(DatabaseConnector)
library("optparse")
cmd_args = commandArgs(trailingOnly = TRUE)
cmd_args = c("--uid=postgres", "--pwd=''", "--host=localhost", "--db=syntheticMGUH", "--source=public", "--target=OMOP")
parser <- OptionParser()
parser <- add_option(parser, c("-u", "--uid"), action="store", default='postgres')
parser <- add_option(parser, c("-p", "--pwd"), action="store", default='')
parser <- add_option(parser, "--host",action="store", default='localhost')
parser <- add_option(parser, "--db",action="store", default='localhost')
parser <- add_option(parser, "--source",action="store", default='public')
parser <- add_option(parser, "--target",action="store", default='OMOP')
args <- parse_args(parser, args = cmd_args, positional_arguments = TRUE)
sprintf("%s/%s", args$options$host, args$options$db)
cd <- DatabaseConnector::createConnectionDetails(
dbms     = "postgresql",
server   = sprintf("%s/%s", args$options$host, args$options$db),
user     = args$options$uid,
password = args$options$pwd,
port     = 5432,
)
print(cd)
syntheaSchema  <- args$options$source
cdmSchema      <- args$options$target
cdmVersion     <- "5.4"
syntheaVersion <- "3.0.0"
vocabFileLoc   <- "OMOP/vocabulary_v5"
con <- connect(cd)
dbExecute(con, "DROP SCHEMA IF EXISTS OMOP CASCADE;")
dbExecute(con, "CREATE SCHEMA OMOP;")
dbDisconnect(con)
con <- connect(cd)
dbExecute(con, "alter table public.allergies alter column code type varchar(32);")
dbExecute(con, "alter table public.immunizations alter column code type varchar(32);")
dbExecute(con, "alter table public.conditions alter column code type varchar(32);")
dbExecute(con, "alter table public.devices alter column code type varchar(32);")
dbExecute(con, "alter table public.encounters alter column code type varchar(32);")
dbExecute(con, "alter table public.encounters alter column reasoncode type varchar(32);")
dbExecute(con, "alter table public.imaging_studies alter column bodysite_code type varchar(32);")
dbExecute(con, "alter table public.imaging_studies alter column procedure_code type varchar(32);")
dbExecute(con, "alter table public.immunizations alter column code type varchar(32);")
dbExecute(con, "alter table public.medications alter column code type varchar(32);")
dbExecute(con, "alter table public.observations alter column code type varchar(32);")
dbExecute(con, "alter table public.procedures alter column code type varchar(32);")
dbExecute(con, "alter table public.procedures alter column reasoncode type varchar(32);")
dbExecute(con, "alter table public.claims alter column diagnosis1 type varchar(32);")
dbExecute(con, "alter table public.claims alter column currentillnessdate type timestamptz USING currentillnessdate::timestamp with time zone;")
# These are temporary and we'll roll them back, difference between 3.0.0 and 3.2.0
dbExecute(con, "alter table public.payer_transitions rename column start_date to start_year;")
con <- connect(cd)
dbExecute(con, "alter table public.payer_transitions rename column start_year to start_date;")
dbExecute(con, "alter table public.payer_transitions rename column end_year to end_date;")
dbDisconnect(con)
#!/usr/bin/env Rscript
# We are loading a version 5.4 CDM into a local PostgreSQL database called "syntheticMGUH".
# The ETLSyntheaBuilder package leverages the OHDSI/CommonDataModel package for CDM creation.
# Valid CDM versions are determined by executing CommonDataModel::listSupportedVersions().
# The strings representing supported CDM versions are currently "5.3" and "5.4".
library(ETLSyntheaBuilder) #renv::install_packages("OHDSI/ETL-Synthea")
library(DatabaseConnector)
library("optparse")
cmd_args = commandArgs(trailingOnly = TRUE)
cmd_args = c("--uid=postgres", "--pwd=''", "--host=localhost", "--db=syntheticMGUH", "--source=public", "--target=OMOP")
parser <- OptionParser()
parser <- add_option(parser, c("-u", "--uid"), action="store", default='postgres')
parser <- add_option(parser, c("-p", "--pwd"), action="store", default='')
parser <- add_option(parser, "--host",action="store", default='localhost')
parser <- add_option(parser, "--db",action="store", default='localhost')
parser <- add_option(parser, "--source",action="store", default='public')
parser <- add_option(parser, "--target",action="store", default='OMOP')
args <- parse_args(parser, args = cmd_args, positional_arguments = TRUE)
sprintf("%s/%s", args$options$host, args$options$db)
cd <- DatabaseConnector::createConnectionDetails(
dbms     = "postgresql",
server   = sprintf("%s/%s", args$options$host, args$options$db),
user     = args$options$uid,
password = args$options$pwd,
port     = 5432,
)
print(cd)
syntheaSchema  <- args$options$source
cdmSchema      <- args$options$target
cdmVersion     <- "5.4"
syntheaVersion <- "3.0.0"
vocabFileLoc   <- "OMOP/vocabulary_v5"
con <- connect(cd)
dbExecute(con, "DROP SCHEMA IF EXISTS OMOP CASCADE;")
dbExecute(con, "CREATE SCHEMA OMOP;")
dbDisconnect(con)
con <- connect(cd)
dbExecute(con, "alter table public.allergies alter column code type varchar(32);")
dbExecute(con, "alter table public.immunizations alter column code type varchar(32);")
dbExecute(con, "alter table public.conditions alter column code type varchar(32);")
dbExecute(con, "alter table public.devices alter column code type varchar(32);")
dbExecute(con, "alter table public.encounters alter column code type varchar(32);")
dbExecute(con, "alter table public.encounters alter column reasoncode type varchar(32);")
dbExecute(con, "alter table public.imaging_studies alter column bodysite_code type varchar(32);")
dbExecute(con, "alter table public.imaging_studies alter column procedure_code type varchar(32);")
dbExecute(con, "alter table public.immunizations alter column code type varchar(32);")
dbExecute(con, "alter table public.medications alter column code type varchar(32);")
dbExecute(con, "alter table public.observations alter column code type varchar(32);")
dbExecute(con, "alter table public.procedures alter column code type varchar(32);")
dbExecute(con, "alter table public.procedures alter column reasoncode type varchar(32);")
dbExecute(con, "alter table public.claims alter column diagnosis1 type varchar(32);")
dbExecute(con, "alter table public.claims alter column currentillnessdate type timestamptz USING currentillnessdate::timestamp with time zone;")
# These are temporary and we'll roll them back, difference between 3.0.0 and 3.2.0
dbExecute(con, "alter table public.payer_transitions rename column start_date to start_year;")
dbExecute(con, "alter table public.payer_transitions rename column end_date to end_year;")
dbDisconnect(con)
ETLSyntheaBuilder::CreateCDMTables(connectionDetails = cd, cdmSchema = cdmSchema, cdmVersion = cdmVersion)
ETLSyntheaBuilder::LoadVocabFromCsv(connectionDetails = cd, cdmSchema = cdmSchema, vocabFileLoc = vocabFileLoc)
ETLSyntheaBuilder::LoadEventTables(connectionDetails = cd, cdmSchema = cdmSchema, syntheaSchema = syntheaSchema, cdmVersion = cdmVersion, syntheaVersion = syntheaVersion)
con <- connect(cd)
dbExecute(con, "alter table public.payer_transitions rename column start_year to start_date;")
dbExecute(con, "alter table public.payer_transitions rename column end_year to end_date;")
dbDisconnect(con)
con <- connect(cd)
dbExecute(con, "alter table public.payer_transitions rename column start_year to start_date;")
